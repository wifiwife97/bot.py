import os
import logging
import aiohttp
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)

# Static configuration instead of .env
TELEGRAM_BOT_TOKEN = "8079762330:AAH54riHaoG4rL3LTXW9uDbfOOif5095l9g"
AUTHORIZED_USER_ID = 7865578608

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Reusable authorization check
def is_authorized(user_id):
    return user_id == AUTHORIZED_USER_ID

# Command: /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("üö´ Unauthorized user.")
        return

    keyboard = [
        [InlineKeyboardButton("üìà Signal", callback_data='signal')],
        [InlineKeyboardButton("üí∞ Price", callback_data='price_btc')],
        [InlineKeyboardButton("‚ùì Help", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîò /start ‡¶¶‡¶ø‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶§‡¶ø‡¶®‡¶ü‡¶æ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶Ü‡¶∏‡¶¨‡ßá:\n\n"
        "üìà Signal - ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶¨‡ßá\n"
        "üí∞ Price - BTC ‡¶¶‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü\n"
        "‚ùì Help - ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶Æ‡ßá‡¶®‡ßÅ",
        reply_markup=reply_markup
    )

# Callback Handler
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not is_authorized(update.effective_user.id):
        await query.edit_message_text("üö´ Unauthorized access.")
        return

    if query.data == 'signal':
        await query.edit_message_text("üöÄ Signal: BUY BTC at support, SL below 62000.")
    elif query.data == 'price_btc':
        await send_price(query, 'bitcoin')
    elif query.data == 'help':
        await query.edit_message_text("Available commands:\n/start - Menu\n/signal - Get latest signal\n/price BTC - Get BTC price")

# Async price fetcher
async def send_price(query, coin):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin}&vs_currencies=usd"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as res:
                data = await res.json()
                if coin in data:
                    price = data[coin]['usd']
                    await query.edit_message_text(f"üí∞ Current price of {coin.upper()}: ${price}")
                else:
                    await query.edit_message_text("Coin not found.")
    except Exception as e:
        logger.error(f"Price fetch failed: {e}")
        await query.edit_message_text("Error fetching price.")

# Auto trigger /start
async def auto_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_authorized(update.effective_user.id):
        await start_command(update, context)

# Main runner
async def main():
    try:
        if not TELEGRAM_BOT_TOKEN:
            raise EnvironmentError("TELEGRAM_BOT_TOKEN not set")

        app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), auto_start))

        print("Bot is running...")
        await app.run_polling()
    except ModuleNotFoundError as e:
        logger.error(f"Missing module: {e}. Try running 'pip install -r requirements.txt'")

if __name__ == "__main__":
    asyncio.run(main())
